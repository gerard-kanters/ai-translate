[1mdiff --git a/includes/class-ai-dom.php b/includes/class-ai-dom.php[m
[1mindex 84fe4c4..be1907a 100755[m
[1m--- a/includes/class-ai-dom.php[m
[1m+++ b/includes/class-ai-dom.php[m
[36m@@ -133,7 +133,7 @@[m [mfinal class AI_DOM[m
             'doc' => $doc,[m
             'segments' => $segments,[m
             'nodeIndex' => $nodeIndex,[m
[31m-            'originalHTML' => $html,[m
[32m+[m[32m            'originalHTML' => $htmlToLoad,[m
         ];[m
     }[m
 [m
[1mdiff --git a/includes/class-ai-seo.php b/includes/class-ai-seo.php[m
[1mindex 2483cf7..afa375d 100755[m
[1m--- a/includes/class-ai-seo.php[m
[1m+++ b/includes/class-ai-seo.php[m
[36m@@ -44,6 +44,7 @@[m [mfinal class AI_SEO[m
 [m
     /**[m
      * Inject hreflang/canonical and translate simple meta labels.[m
[32m+[m[32m     * Uses plain text manipulation instead of DOM parsing to avoid corrupting script tags.[m
      *[m
      * @param string $html[m
      * @param string $lang[m
[36m@@ -60,85 +61,58 @@[m [mfinal class AI_SEO[m
             return $html;[m
         }[m
 [m
[31m-        // Parse HTML into DOM[m
[31m-        $doc = new \DOMDocument();[m
[31m-        $internalErrors = libxml_use_internal_errors(true);[m
[31m-        $htmlToLoad = self::ensureUtf8($html);[m
[31m-        $flags = LIBXML_HTML_NODEFDTD;[m
[31m-        $doc->loadHTML('<?xml encoding="utf-8" ?>' . $htmlToLoad, $flags);[m
[31m-        libxml_clear_errors();[m
[31m-        libxml_use_internal_errors($internalErrors);[m
[31m-[m
[31m-        $xpath = new \DOMXPath($doc);[m
         if (function_exists('ai_translate_dbg')) {[m
             ai_translate_dbg('seo_inject_start', [[m
                 'lang' => $lang,[m
[31m-                'has_head' => (bool) $doc->getElementsByTagName('head')->item(0),[m
[32m+[m[32m                'has_head' => (bool) stripos($html, '</head>'),[m
             ]);[m
         }[m
[31m-        $head = $doc->getElementsByTagName('head')->item(0);[m
[31m-        if (!$head) {[m
[31m-            // Create <head> if missing[m
[31m-            $head = $doc->createElement('head');[m
[31m-            $htmlEl = $doc->getElementsByTagName('html')->item(0);[m
[31m-            if ($htmlEl) {[m
[31m-                $htmlEl->insertBefore($head, $htmlEl->firstChild);[m
[31m-            } else {[m
[31m-                // As a fallback, prepend head at the top-level[m
[31m-                $doc->insertBefore($head, $doc->firstChild);[m
[31m-            }[m
[31m-        }[m
 [m
[31m-        // Translate <title> content for non-default languages (preserve structure)[m
[31m-        try {[m
[31m-            if ($default && $lang && strtolower((string)$lang) !== strtolower((string)$default)) {[m
[31m-                $titleNode = $doc->getElementsByTagName('title')->item(0);[m
[31m-                if ($titleNode) {[m
[31m-                    $origTitle = trim((string) $titleNode->textContent);[m
[31m-                    if ($origTitle !== '') {[m
[31m-                        $newTitle = self::maybeTranslateMeta($origTitle, $default, $lang);[m
[31m-                        if (is_string($newTitle) && $newTitle !== '') {[m
[31m-                            while ($titleNode->firstChild) { $titleNode->removeChild($titleNode->firstChild); }[m
[31m-                            $titleNode->appendChild($doc->createTextNode($newTitle));[m
[31m-                        }[m
[32m+[m[32m        // Translate <title> content for non-default languages[m
[32m+[m[32m        if ($default && $lang && strtolower((string)$lang) !== strtolower((string)$default)) {[m
[32m+[m[32m            if (preg_match('/<title\b[^>]*>(.*?)<\/title>/is', $html, $titleMatch)) {[m
[32m+[m[32m                $origTitle = trim(strip_tags($titleMatch[1]));[m
[32m+[m[32m                if ($origTitle !== '') {[m
[32m+[m[32m                    $newTitle = self::maybeTranslateMeta($origTitle, $default, $lang);[m
[32m+[m[32m                    if (is_string($newTitle) && $newTitle !== '') {[m
[32m+[m[32m                        $escapedTitle = esc_html($newTitle);[m
[32m+[m[32m                        $html = preg_replace([m
[32m+[m[32m                            '/<title\b[^>]*>.*?<\/title>/is',[m
[32m+[m[32m                            '<title>' . $escapedTitle . '</title>',[m
[32m+[m[32m                            $html,[m
[32m+[m[32m                            1[m
[32m+[m[32m                        );[m
                     }[m
                 }[m
             }[m
[31m-        } catch (\Throwable $e) {[m
[31m-            // Fail-safe: keep original title on error[m
         }[m
 [m
[32m+[m[32m        // Collect meta tags to inject before </head>[m
[32m+[m[32m        $metaInjections = [];[m
[32m+[m
         // 1) Meta Description (add if missing)[m
[31m-        $hasMetaDesc = false;[m
[31m-        $metaDescNodes = $xpath->query('//head/meta[translate(@name, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz")="description"]');[m
[31m-        if ($metaDescNodes && $metaDescNodes->length > 0) {[m
[31m-            $hasMetaDesc = true; // Existing description likely already translated by AI_DOM[m
[31m-        }[m
[31m-        if (!$hasMetaDesc) {[m
[32m+[m[32m        if (!preg_match('/<meta\s[^>]*name=["\']description["\']/i', $html)) {[m
             $desc = self::computeMetaDescription();[m
             if ($desc !== '') {[m
                 $finalDesc = self::maybeTranslateMeta($desc, $default, $lang);[m
                 $finalDesc = self::truncateUtf8($finalDesc, 200, '...');[m
                 if ($finalDesc !== '') {[m
[31m-                    $meta = $doc->createElement('meta');[m
[31m-                    $meta->setAttribute('name', 'description');[m
[31m-                    $meta->setAttribute('content', esc_attr($finalDesc));[m
[31m-                    $head->appendChild($meta);[m
[31m-                    $head->appendChild($doc->createTextNode("\n"));[m
[32m+[m[32m                    $metaInjections[] = '<meta name="description" content="' . esc_attr($finalDesc) . '">';[m
                 }[m
             }[m
         }[m
 [m
[31m-        // 2) Open Graph (add missing og:* tags)[m
[31m-        $ogTitleMissing = self::isOgMissing($xpath, 'og:title');[m
[31m-        $ogDescMissing = self::isOgMissing($xpath, 'og:description');[m
[31m-        $ogImageMissing = self::isOgMissing($xpath, 'og:image');[m
[31m-        $ogUrlMissing   = self::isOgMissing($xpath, 'og:url');[m
[32m+[m[32m        // 2) Open Graph tags (add if missing)[m
[32m+[m[32m        $needsOgTitle = !preg_match('/<meta\s[^>]*property=["\']og:title["\']/i', $html);[m
[32m+[m[32m        $needsOgDesc = !preg_match('/<meta\s[^>]*property=["\']og:description["\']/i', $html);[m
[32m+[m[32m        $needsOgImage = !preg_match('/<meta\s[^>]*property=["\']og:image["\']/i', $html);[m
[32m+[m[32m        $needsOgUrl = !preg_match('/<meta\s[^>]*property=["\']og:url["\']/i', $html);[m
 [m
[31m-        if ($ogTitleMissing || $ogDescMissing || $ogImageMissing || $ogUrlMissing) {[m
[32m+[m[32m        if ($needsOgTitle || $needsOgDesc || $needsOgImage || $needsOgUrl) {[m
             $siteName = (string) get_bloginfo('name');[m
[31m-            $ogTitle = '';[m
[31m-            if ($ogTitleMissing) {[m
[32m+[m[41m            [m
[32m+[m[32m            if ($needsOgTitle) {[m
[32m+[m[32m                $ogTitle = '';[m
                 if (is_singular()) {[m
                     $postId = get_queried_object_id();[m
                     if ($postId) {[m
[36m@@ -154,20 +128,21 @@[m [mfinal class AI_SEO[m
                 }[m
                 if ($ogTitle !== '') {[m
                     $ogTitle = self::maybeTranslateMeta($ogTitle, $default, $lang);[m
[32m+[m[32m                    $metaInjections[] = '<meta property="og:title" content="' . esc_attr(trim($ogTitle)) . '">';[m
                 }[m
             }[m
 [m
[31m-            $ogDesc = '';[m
[31m-            if ($ogDescMissing) {[m
[32m+[m[32m            if ($needsOgDesc) {[m
                 $ogDesc = self::computeMetaDescription();[m
                 if ($ogDesc !== '') {[m
                     $ogDesc = self::maybeTranslateMeta($ogDesc, $default, $lang);[m
                     $ogDesc = self::truncateUtf8($ogDesc, 200, '...');[m
[32m+[m[32m                    $metaInjections[] = '<meta property="og:description" content="' . esc_attr(trim($ogDesc)) . '">';[m
                 }[m
             }[m
 [m
[31m-            $ogImage = '';[m
[31m-            if ($ogImageMissing) {[m
[32m+[m[32m            if ($needsOgImage) {[m
[32m+[m[32m                $ogImage = '';[m
                 if (is_singular()) {[m
                     $postId = get_queried_object_id();[m
                     if ($postId && has_post_thumbnail($postId)) {[m
[36m@@ -187,102 +162,45 @@[m [mfinal class AI_SEO[m
                         }[m
                     }[m
                 }[m
[32m+[m[32m                if ($ogImage !== '') {[m
[32m+[m[32m                    $metaInjections[] = '<meta property="og:image" content="' . esc_url($ogImage) . '">';[m
[32m+[m[32m                }[m
             }[m
 [m
[31m-            $ogUrl = '';[m
[31m-            if ($ogUrlMissing) {[m
[32m+[m[32m            if ($needsOgUrl) {[m
                 $currentAbs = self::currentPageUrlAbsolute();[m
                 $path = AI_URL::rewrite_single_href($currentAbs, $lang, $default);[m
                 if (is_string($path) && $path !== '') {[m
                     $ogUrl = home_url($path);[m
[31m-                }[m
[31m-                if ($ogUrl === '') {[m
[32m+[m[32m                } else {[m
                     $ogUrl = $currentAbs;[m
                 }[m
[31m-            }[m
[31m-[m
[31m-            if ($ogTitleMissing && $ogTitle !== '') {[m
[31m-                $meta = $doc->createElement('meta');[m
[31m-                $meta->setAttribute('property', 'og:title');[m
[31m-                $meta->setAttribute('content', esc_attr(trim($ogTitle)));[m
[31m-                $head->appendChild($meta);[m
[31m-                $head->appendChild($doc->createTextNode("\n"));[m
[31m-            }[m
[31m-            if ($ogDescMissing && $ogDesc !== '') {[m
[31m-                $meta = $doc->createElement('meta');[m
[31m-                $meta->setAttribute('property', 'og:description');[m
[31m-                $meta->setAttribute('content', esc_attr(trim($ogDesc)));[m
[31m-                $head->appendChild($meta);[m
[31m-                $head->appendChild($doc->createTextNode("\n"));[m
[31m-            }[m
[31m-            if ($ogImageMissing && $ogImage !== '') {[m
[31m-                $meta = $doc->createElement('meta');[m
[31m-                $meta->setAttribute('property', 'og:image');[m
[31m-                $meta->setAttribute('content', esc_url($ogImage));[m
[31m-                $head->appendChild($meta);[m
[31m-                $head->appendChild($doc->createTextNode("\n"));[m
[31m-            }[m
[31m-            if ($ogUrlMissing && $ogUrl !== '') {[m
[31m-                $meta = $doc->createElement('meta');[m
[31m-                $meta->setAttribute('property', 'og:url');[m
[31m-                $meta->setAttribute('content', esc_url($ogUrl));[m
[31m-                $head->appendChild($meta);[m
[31m-                $head->appendChild($doc->createTextNode("\n"));[m
[32m+[m[32m                if ($ogUrl !== '') {[m
[32m+[m[32m                    $metaInjections[] = '<meta property="og:url" content="' . esc_url($ogUrl) . '">';[m
[32m+[m[32m                }[m
             }[m
         }[m
 [m
         // 3) hreflang alternates[m
[31m-        self::injectHreflang($doc, $xpath, $head, $lang, $default);[m
[31m-        if (function_exists('ai_translate_dbg')) {[m
[31m-            $hreflangs = [];[m
[31m-            $links = $xpath->query('//head/link[@rel="alternate" and @hreflang]');[m
[31m-            if ($links) {[m
[31m-                foreach ($links as $lnk) {[m
[31m-                    if ($lnk instanceof \DOMElement) {[m
[31m-                        $hreflangs[] = strtolower((string) $lnk->getAttribute('hreflang'));[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-            ai_translate_dbg('seo_inject_done', [ 'lang' => $lang, 'hreflangs' => $hreflangs ]);[m
[32m+[m[32m        $hreflangTags = self::generateHreflangTags($lang, $default);[m
[32m+[m[32m        if ($hreflangTags !== '') {[m
[32m+[m[32m            $metaInjections[] = $hreflangTags;[m
         }[m
 [m
[31m-        $result = $doc->saveHTML();[m
[31m-        [m
[31m-        // Remove XML declaration added by loadHTML (causes quirks mode)[m
[31m-        $result = preg_replace('/<\?xml[^?]*\?>\s*/i', '', $result);[m
[31m-        [m
[31m-        // Preserve DOCTYPE from original HTML to avoid quirks mode[m
[31m-        if (preg_match('/^(<!DOCTYPE[^>]*>)/i', (string) $html, $docMatch)) {[m
[31m-            // Ensure we don't duplicate if saveHTML already includes it[m
[31m-            if (stripos($result, '<!DOCTYPE') === false) {[m
[31m-                $result = $docMatch[1] . "\n" . $result;[m
[31m-            }[m
[32m+[m[32m        // Inject all meta tags before </head>[m
[32m+[m[32m        if (!empty($metaInjections) && stripos($html, '</head>') !== false) {[m
[32m+[m[32m            $injection = "\n" . implode("\n", $metaInjections) . "\n";[m
[32m+[m[32m            $html = preg_replace('#</head>#i', $injection . '</head>', $html, 1);[m
         }[m
[31m-        [m
[31m-        // Preserve original <body> framing to avoid theme structure conflicts[m
[31m-        // Extract only the <head> from DOMDocument result and merge with original HTML body[m
[31m-        if (preg_match('/<head\b[^>]*>([\s\S]*?)<\/head>/i', (string) $result, $headNew) &&[m
[31m-            preg_match('/<head\b[^>]*>([\s\S]*?)<\/head>/i', (string) $html, $headOrig) &&[m
[31m-            preg_match('/<body\b[^>]*>([\s\S]*?)<\/body>/i', (string) $html, $bodyOrig)) {[m
[31m-            [m
[31m-            $newHead = (string) $headNew[1];[m
[31m-            $origBodyTag = (string) $bodyOrig[0];[m
[31m-            [m
[31m-            // Build result: DOCTYPE + updated head + original body[m
[31m-            $doctype = '';[m
[31m-            if (preg_match('/^(<!DOCTYPE[^>]*>)/i', (string) $html, $doctypeMatch)) {[m
[31m-                $doctype = $doctypeMatch[1] . "\n";[m
[31m-            }[m
[31m-            [m
[31m-            $htmlTag = '<html';[m
[31m-            if (preg_match('/<html\b([^>]*)>/i', (string) $html, $htmlMatch)) {[m
[31m-                $htmlTag = '<html' . $htmlMatch[1] . '>';[m
[31m-            }[m
[31m-            [m
[31m-            $result = $doctype . $htmlTag . "\n<head>" . $newHead . "</head>\n" . $origBodyTag . "</html>";[m
[32m+[m
[32m+[m[32m        if (function_exists('ai_translate_dbg')) {[m
[32m+[m[32m            ai_translate_dbg('seo_inject_done', [[m[41m [m
[32m+[m[32m                'lang' => $lang,[m[41m [m
[32m+[m[32m                'injections' => count($metaInjections)[m
[32m+[m[32m            ]);[m
         }[m
[31m-        [m
[31m-        return $result;[m
[32m+[m
[32m+[m[32m        return $html;[m
     }[m
 [m
     /**[m
[36m@@ -338,6 +256,41 @@[m [mfinal class AI_SEO[m
         return implode("\n", $tags);[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Build hreflang URL with translated slug for a given language.[m
[32m+[m[32m     *[m
[32m+[m[32m     * @param string $currentUrl[m
[32m+[m[32m     * @param string $targetLang[m
[32m+[m[32m     * @param string $default[m
[32m+[m[32m     * @param int $post_id[m
[32m+[m[32m     * @return string[m
[32m+[m[32m     */[m
[32m+[m[32m    private static function buildHreflangUrl($currentUrl, $targetLang, $default, $post_id)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (is_front_page() || is_home()) {[m
[32m+[m[32m            if (strtolower($targetLang) === strtolower($default)) {[m
[32m+[m[32m                return home_url('/');[m
[32m+[m[32m            }[m
[32m+[m[32m            return home_url('/' . $targetLang . '/');[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        if ($post_id > 0) {[m
[32m+[m[32m            $translatedSlug = AI_Slugs::get_or_generate($post_id, $targetLang);[m
[32m+[m[32m            if ($translatedSlug !== null) {[m
[32m+[m[32m                if (strtolower($targetLang) === strtolower($default)) {[m
[32m+[m[32m                    return home_url('/' . ltrim($translatedSlug, '/') . '/');[m
[32m+[m[32m                }[m
[32m+[m[32m                return home_url('/' . $targetLang . '/' . ltrim($translatedSlug, '/') . '/');[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        $path = AI_URL::rewrite_single_href($currentUrl, $targetLang, $default);[m
[32m+[m[32m        if (!is_string($path) || $path === '') {[m
[32m+[m[32m            return '';[m
[32m+[m[32m        }[m
[32m+[m[32m        return home_url($path);[m
[32m+[m[32m    }[m
[32m+[m
     /**[m
      * Compute a meta description candidate in the site's default language.[m
      *[m
[36m@@ -394,139 +347,6 @@[m [mfinal class AI_SEO[m
         return $translated;[m
     }[m
 [m
[31m-    /**[m
[31m-     * Inject hreflang alternate links into <head>.[m
[31m-     *[m
[31m-     * @param \DOMDocument $doc[m
[31m-     * @param \DOMXPath $xpath[m
[31m-     * @param \DOMElement $head[m
[31m-     * @param string $current[m
[31m-     * @param string $default[m
[31m-     * @return void[m
[31m-     */[m
[31m-    private static function injectHreflang($doc, $xpath, $head, $current, $default)[m
[31m-    {[m
[31m-        // Collect existing hreflang rels to avoid duplicates[m
[31m-        $existing = [];[m
[31m-        $links = $xpath->query('//head/link[@rel="alternate" and @hreflang]');[m
[31m-        if ($links) {[m
[31m-            foreach ($links as $lnk) {[m
[31m-                if ($lnk instanceof \DOMElement) {[m
[31m-                    $existing[strtolower((string) $lnk->getAttribute('hreflang'))] = true;[m
[31m-                }[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        $settings = get_option('ai_translate_settings', []);[m
[31m-        $enabled = isset($settings['enabled_languages']) && is_array($settings['enabled_languages']) ? $settings['enabled_languages'] : [];[m
[31m-        $detectable = isset($settings['detectable_languages']) && is_array($settings['detectable_languages']) ? $settings['detectable_languages'] : [];[m
[31m-        $langs = array_values(array_unique(array_merge($enabled, $detectable)));[m
[31m-        if (is_string($default) && $default !== '' && !in_array($default, $langs, true)) {[m
[31m-            $langs[] = $default;[m
[31m-        }[m
[31m-[m
[31m-        $currentAbs = self::currentPageUrlAbsolute();[m
[31m-        $defaultUrl = '';[m
[31m-        [m
[31m-        // Determine post_id for singular pages to enable slug translation[m
[31m-        $post_id = 0;[m
[31m-        if (is_singular()) {[m
[31m-            $post_id = get_queried_object_id();[m
[31m-        }[m
[31m-[m
[31m-        foreach ($langs as $lc) {[m
[31m-            $lc = sanitize_key((string) $lc);[m
[31m-            if (isset($existing[$lc])) {[m
[31m-                continue; // already present[m
[31m-            }[m
[31m-            [m
[31m-            // Build URL with translated slug if available[m
[31m-            $href = self::buildHreflangUrl($currentAbs, $lc, $default, $post_id);[m
[31m-            if ($href === '') {[m
[31m-                continue;[m
[31m-            }[m
[31m-            [m
[31m-            if ($lc === $default) {[m
[31m-                $defaultUrl = $href;[m
[31m-            }[m
[31m-            $el = $doc->createElement('link');[m
[31m-          